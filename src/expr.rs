// GENERATED by generate_ast_enum.rs
use crate::token::Token;
use std::fmt::Debug;

// Placeholder for Object; replace with a proper enum for real use.
pub type Object = String;

#[derive(Debug, Clone)]
pub enum Expr {
    Binary { left: Box<Expr>, operator: Token, right: Box<Expr> },
    Grouping { expression: Box<Expr> },
    Literal { value: Object },
    Unary { operator: Token, right: Box<Expr> },
}

pub trait Visitor<R> {
    fn visit_binary_expr(&mut self, left: &Expr, operator: &Token, right: &Expr) -> R;
    fn visit_grouping_expr(&mut self, expression: &Expr) -> R;
    fn visit_literal_expr(&mut self, value: &Object) -> R;
    fn visit_unary_expr(&mut self, operator: &Token, right: &Expr) -> R;
}

impl Expr {
    pub fn accept<R, V: Visitor<R>>(&self, visitor: &mut V) -> R {
        match self {
            Expr::Binary { left: ref left, operator: ref operator, right: ref right } => visitor.visit_binary_expr(&*left, operator, &*right),
            Expr::Grouping { expression: ref expression } => visitor.visit_grouping_expr(&*expression),
            Expr::Literal { value: ref value } => visitor.visit_literal_expr(value),
            Expr::Unary { operator: ref operator, right: ref right } => visitor.visit_unary_expr(operator, &*right),
        }
    }
}

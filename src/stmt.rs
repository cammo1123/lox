// GENERATED by generate_ast_enum.rs
use crate::{error::RuntimeError, expr::Expr, token::Token};
use std::fmt::Debug;

#[derive(Debug, Clone)]
pub enum Stmt {
    Nil,
    Block { statements: Vec<Stmt> },
    Expression { expression: Expr },
    Print { expression: Expr },
    Var { name: Token, initializer: Expr },
}

pub trait Visitor<T> {
    fn visit_null_stmt(&mut self) -> Result<T, RuntimeError>;
    fn visit_block_stmt(&mut self, statements: &Vec<Stmt>) -> Result<T, RuntimeError>;
    fn visit_expression_stmt(&mut self, expression: &Expr) -> Result<T, RuntimeError>;
    fn visit_print_stmt(&mut self, expression: &Expr) -> Result<T, RuntimeError>;
    fn visit_var_stmt(&mut self, name: &Token, initializer: &Expr) -> Result<T, RuntimeError>;
}

impl Stmt {
    pub fn accept<T, V: Visitor<T>>(&self, visitor: &mut V) -> Result<T, RuntimeError> {
        match self {
            Stmt::Nil => visitor.visit_null_stmt(),
            Stmt::Block { statements } => visitor.visit_block_stmt(&statements),
            Stmt::Expression { expression } => visitor.visit_expression_stmt(&expression),
            Stmt::Print { expression } => visitor.visit_print_stmt(&expression),
            Stmt::Var { name, initializer } => visitor.visit_var_stmt(&name, &initializer),
        }
    }
}
